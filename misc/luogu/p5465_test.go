// Code generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://www.luogu.com.cn/problem/P5465
func Test_p5465(t *testing.T) {
	testCases := [][2]string{
		{
			`7
1 1 2 1 4 6
5
3 4 6
1 5 7
1 2 4
1 2 6
1 3 5`,
			`3/2
13/5
3/2
2/1
1/1`,
		},
		{
			`5
1 2 3 2
1
1 3 4`,
			`2/1`,
		},
		{
			`5
1 1 3 2
1
1 3 4`,
			`5/3`,
		},
		{
			`5
1 2 3 1
1
1 2 4`,
			`2/1`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, p5465)
}

func TestCompare_p5465(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(3, 9)
		rg.NewLine()
		for i := 2; i <= n; i++ {
			rg.Int(1, i-1)
		}
		rg.NewLine()
		rg.One()
		l := rg.Int(1, n-2)
		r := rg.Int(l+1, n-1)
		rg.Int(r+1, n)
		return rg.String()
	}

	runBF := func(in io.Reader, out io.Writer) {
		var n, q, l, r, x int
		Fscan(in, &n)
		g := make([][]int, n+1)
		for i := 2; i <= n; i++ {
			Fscan(in, &l)
			for j := l; j < i; j++ {
				g[i] = append(g[i], j)
				g[j] = append(g[j], i)
			}
		}

		bfs := func(st int) []int {
			dis := make([]int, len(g))
			for i := range dis {
				dis[i] = -1
			}
			dis[st] = 0
			q := []int{st}
			for len(q) > 0 {
				v := q[0]
				q = q[1:]
				for _, w := range g[v] {
					if dis[w] < 0 {
						dis[w] = dis[v] + 1
						q = append(q, w)
					}
				}
			}
			return dis
		}
		dis := make([][]int, n+1)
		for i := 1; i <= n; i++ {
			dis[i] = bfs(i)
		}

		Fscan(in, &q)
		for range q {
			Fscan(in, &l, &r, &x)
			s := 0
			for i := l; i <= r; i++ {
				s += dis[x][i]
			}
			d := r - l + 1
			g := gcd(s, d)
			Fprintf(out, "%d/%d\n", s/g, d/g)
		}
	}

	testCases := [][2]string{
		{
			`7
1 1 2 1 4 6
5
3 4 6
1 5 7
1 2 4
1 2 6
1 3 5`,
			`3/2
13/5
3/2
2/1
1/1`,
		},
	}
	testutil.AssertEqualStringCase(_t, testCases, 0, runBF)
	//return

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, p5465)
}
