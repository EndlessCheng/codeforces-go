// Code generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://www.luogu.com.cn/problem/P2900
func Test_p2900(t *testing.T) {
	testCases := [][2]string{
		{
			`4 
100 1 
15 15 
20 5 
1 100`,
			`500`,
		},
		{
			`2
1 2
2 1`,
			`4`,
		},
		{
			`3
2 1
3 2
1 3`,
			`9`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, p2900)
}

func TestCompare_p2900(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 3)
		rg.NewLine()
		for range n {
			rg.Int(1,3)
			rg.Int(1,3)
			rg.NewLine()
		}
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n int
		Fscan(in, &n)
		type pair struct{ x, y int }
		a := make([]pair, n)
		for i := range a {
			Fscan(in, &a[i].x, &a[i].y)
		}
		ans := int(1e9)
		groups := []pair{}
		var dfs func(int)
		dfs = func(i int) {
			if i == len(a) {
				tot := 0
				for _, v := range groups {
					tot += v.x*v.y
				}
				ans = min(ans, tot)
				return
			}
			v := a[i]
			groups = append(groups, v)
			dfs(i + 1)
			groups = groups[:len(groups)-1]
			for j := range groups {
				old := groups[j]
				groups[j].x = max(groups[j].x, v.x)
				groups[j].y = max(groups[j].y, v.y)
				dfs(i + 1)
				groups[j] = old
			}
		}
		dfs(0)
		Fprint(out, ans)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, p2900)
}

