// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/835/F 2500
// https://codeforces.com/problemset/status/835/problem/F?friends=on
func Test_cf835F(t *testing.T) {
	testCases := [][2]string{
		{
			`3
1 2 4
2 3 5
1 3 1`,
			`5`,
		},
		{
			`5
2 3 7
3 1 9
4 1 8
3 5 4
4 5 5`,
			`18`,
		},
		{
			`4
1 2 2
2 3 3
1 4 2
1 3 1`,
			`4`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf835F)
}

func TestCompare_cf835F(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(3, 9)
		rg.NewLine()
		es := rg.TreeWeightedEdges(n, 1, 1, 9)
	o:
		for {
			v, w := rg.IntOnly(1, n), rg.IntOnly(1, n)
			if v == w {
				continue
			}
			for _, e := range es {
				if e[0] == v && e[1] == w || e[0] == w && e[1] == v {
					continue o
				}
			}
			rg.Int(v, v)
			rg.Int(w, w)
			rg.Int(1, 9)
			break
		}
		return rg.String()
	}

	runBF := func(in io.Reader, out io.Writer) {
		var n int
		Fscan(in, &n)
		es := make([]struct{ v, w, wt int }, n)
		for i := range es {
			Fscan(in, &es[i].v, &es[i].w, &es[i].wt)
		}

		ans := int(1e18)
		for ban := range es {
			type nb struct{ to, wt int }
			g := make([][]nb, n)
			for i, e := range es {
				if i == ban {
					continue
				}
				v, w, wt := e.v-1, e.w-1, e.wt
				g[v] = append(g[v], nb{w, wt})
				g[w] = append(g[w], nb{v, wt})
				diameter := 0
				vis := make([]bool, n)
				cnt := 0
				var dfs func(int, int) int
				dfs = func(v, fa int) (maxL int) {
					if vis[v] {
						return
					}
					vis[v] = true
					cnt++
					for _, e := range g[v] {
						w := e.to
						if w != fa {
							subL := dfs(w, v) + e.wt
							diameter = max(diameter, maxL+subL)
							maxL = max(maxL, subL)
						}
					}
					return
				}
				dfs(0, -1)
				if cnt == n {
					ans = min(ans, diameter)
				}
			}
		}
		Fprintln(out, ans)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf835F)
}
