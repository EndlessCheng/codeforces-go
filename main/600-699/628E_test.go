// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"sort"
	"strings"
	"testing"
)

// https://codeforces.com/problemset/problem/628/E 2300
// https://codeforces.com/problemset/status/628/problem/E?friends=on
func Test_cf628E(t *testing.T) {
	testCases := [][2]string{
		{
			`4 4
zzzz
zzz.
.z..
zzzz`,
			`16`,
		},
		{
			`1 4
z.z.`,
			`2`,
		},
		{
			`2 2
zz
zz`,
			`5`,
		},
		{
			`4 4
.zzz
.z.z
.z..
zzzz`,
			`10`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf628E)
}

func TestCompare_cf628E(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 8)
		m := rg.Int(1, 8)
		rg.NewLine()
		for range n {
			rg.StrInSet(m, m, ".z")
			rg.NewLine()
		}
		return rg.String()
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, cf628EAC, cf628E)
}

// https://codeforces.com/problemset/submission/628/149178141
func cf628EAC(in io.Reader, out io.Writer) {
	type Entry struct {
		left, right int
		c           byte
	}

	var n, m int
	Fscan(in, &n, &m)

	s := make([]byte, m+1)
	left := make([]int, m)
	diags := make([][]Entry, (n-1)+(m-1)+1)

	for i := 0; i < n; i++ {
		Fscan(in, &s)
		z := 0
		for j := 0; j < m; j++ {
			if s[j] == 'z' {
				z++
			} else {
				z = 0
			}
			left[j] = z
		}
		z = 0
		for j := m - 1; j >= 0; j-- {
			if s[j] == 'z' {
				z++
			} else {
				z = 0
			}
			diags[i+j] = append(diags[i+j], Entry{left[j], z, s[j]})
		}
	}

	var result int64
	events := make([][3]int, 0)
	d := min(n, m)
	now := 0
	fenwick := make([][2]int, d+1)

	for _, diag := range diags {
		for b := 0; b < len(diag); {
			if diag[b].c == 'z' {
				e := b
				for e < len(diag) && diag[e].c == 'z' {
					e++
				}

				events = events[:0]
				for j := b; j < e; j++ {
					events = append(events, [3]int{j, j + 1, 1})
					if j-diag[j].right >= b {
						events = append(events, [3]int{j - diag[j].right, j + 1, -1})
					}
				}

				sort.Slice(events, func(i, j int) bool {
					if events[i][0] == events[j][0] {
						if events[i][1] == events[j][1] {
							return events[i][2] < events[j][2]
						}
						return events[i][1] < events[j][1]
					}
					return events[i][0] < events[j][0]
				})

				now++
				k := 0
				for i := b; i < e; i++ {
					for j := min(diag[i].left+i, d); j >= 0; j -= (j + 1) & -(j + 1) {
						if fenwick[j][1] != now {
							fenwick[j] = [2]int{0, now}
						}
						fenwick[j][0]++
					}
					for k < len(events) && events[k][0] == i {
						_, j, delta := events[k][0], events[k][1], events[k][2]
						k++
						subtotal := 0
						for ; j <= d; j += (j + 1) & -(j + 1) {
							if fenwick[j][1] == now {
								subtotal += fenwick[j][0]
							}
						}
						result += int64(delta * subtotal)
					}
				}
				b = e
			} else {
				b++
			}
		}
	}

	Fprintln(out, result)
}

// 读错题的代码：Z 中其他格子是 '.'
func cf628EEmpty(in io.Reader, out io.Writer) {
	var n, m, ans int
	Fscan(in, &n, &m)
	a := make([]string, n)
	sum := make([][]int, n+1)
	for i := range sum {
		sum[i] = make([]int, m+1)
	}
	for i := range a {
		Fscan(in, &a[i])
		ans += strings.Count(a[i], "z")
		if i > 0 {
			for j := 1; j < m; j++ {
				if a[i][j] == 'z' && a[i][j-1] == 'z' && a[i-1][j] == 'z' && a[i-1][j-1] == 'z' {
					ans++
				}
			}
		}
		for j, b := range a[i] {
			sum[i+1][j+1] = sum[i+1][j] + sum[i][j+1] - sum[i][j] + int(b>>6)
		}
	}
	query := func(r1, c1, r2, c2 int) int {
		return sum[r2+1][c2+1] - sum[r2+1][c1] - sum[r1][c2+1] + sum[r1][c1]
	}

	vis := make([][]bool, n)
	for i := range vis {
		vis[i] = make([]bool, m)
	}

	for i := 1; i < n-1; i++ {
		for j := 1; j < m-1; j++ {
			if vis[i][j] == true {
				continue
			}
			x, y := i, j
			for x < n-1 && y > 0 && a[x][y] == 'z' && a[x][y-1] == '.' && a[x][y+1] == '.' {
				vis[x][y] = true
				x++
				y--
			}
			r1 := query(i, y, x-1, j+1)
			r2 := query(i-1, y, i-1, j+1)
			r3 := query(x, y, x, j+1)
			if x > i && r1 == x-i && r2 == j-y+2 && r3 == j-y+2 {
				ans++
			}
		}
	}
	Fprint(out, ans)
}
