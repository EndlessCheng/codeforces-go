// Generated by copypasta/template/generator_test.go
package main

import (
	"bufio"
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/319/C
// https://codeforces.com/problemset/status/319/problem/C?friends=on
func Test_cf319C(t *testing.T) {
	testCases := [][2]string{
		{
			`5
1 2 3 4 5
5 4 3 2 0`,
			`25`,
		},
		{
			`6
1 2 3 10 20 30
6 5 4 3 2 0`,
			`138`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf319C)
}

func TestCompare_cf319C(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 4)
		rg.NewLine()
		rg.Int(1, 1)
		rg.IntSliceOrdered(n-1, 2, 5, true, true)
		rg.IntSliceOrdered(n-1, 1, 5, false, true)
		rg.Int(0, 0)
		return rg.String()
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, cf319C2, cf319C)
}

func cf319C2(_r io.Reader, out io.Writer) {
	in := bufio.NewReader(_r)
	var n int
	Fscan(in, &n)
	a := make([]int, n)
	for i := range a {
		Fscan(in, &a[i])
	}
	b := make([]int, n)
	for i := range b {
		Fscan(in, &b[i])
	}
	dp := make([]int64, n)
	f := func(i, j int) float64 { return float64(dp[j]-dp[i]) / float64(b[i]-b[j]) }
	q := []int{0}
	for i := 1; i < n; i++ {
		for len(q) > 1 && f(q[0], q[1]) < float64(a[i]) {
			q = q[1:]
		}
		dp[i] = dp[q[0]] + int64(b[q[0]])*int64(a[i])
		for len(q) > 1 && f(q[len(q)-1], i) < f(q[len(q)-2], q[len(q)-1]) {
			q = q[:len(q)-1]
		}
		q = append(q, i)
	}
	Fprint(out, dp[n-1])
}
