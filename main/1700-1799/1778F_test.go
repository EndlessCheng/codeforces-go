// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"strings"
	"testing"
)

// https://codeforces.com/problemset/problem/1778/F
// https://codeforces.com/problemset/status/1778/problem/F
func Test_cf1778F(t *testing.T) {
	testCases := [][2]string{
		{
			`2
5 2
24 12 24 6 12
1 2
1 3
2 4
2 5
5 3
24 12 24 6 12
1 2
1 3
2 4
2 5`,
			`288
576`,
		},
		{
			`1
3 2
2 1 2
1 2
2 3`,
			`2`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1778F)
}

func TestCompare_cf1778F(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		rg.One()
		n := rg.Int(2, 9)
		rg.Int(0, n)
		rg.NewLine()
		rg.IntSlice(n, 2, 12)
		rg.TreeEdges(n, 1)
		return rg.String()
	}

	runBF := func(in io.Reader, out io.Writer) {
		for i := 2; i < N; i++ {
			spf[i] = i
		}
		for i := 2; i < N; i++ {
			if spf[i] == i {
				j := i << 1
				for ; j < N; j += i {
					spf[j] = i
				}
			}
		}
		b[1] = 1
		for i := 2; i < N; i++ {
			b[i] = 1
			for s := i; spf[s] > 1; {
				p := spf[s]
				for s > 1 && s%p == 0 {
					b[i] *= p
					s /= p
					if s%p == 0 {
						s /= p
					}
				}
			}
		}
		
		solve := func(Case int) {
			Fscan(in, &n78, &k)
			a = make([]int, n78)
			for i := range a {
				Fscan(in, &a[i])
			}
			adj = [N][]int{}
			for i := 1; i < n78; i++ {
				var u, v int
				Fscan(in, &u, &v)
				u--
				v--
				adj[u] = append(adj[u], v)
				adj[v] = append(adj[v], u)
			}
			dfs1(0, -1)
			ans := a[0]
			for i := 1; i*i <= a[0]; i++ {
				if a[0]%i != 0 {
					continue
				}
				if 1+dfs2(0, -1, i) <= k {
					ans = max(ans, a[0]*i)
				}
				if 1+dfs2(0, -1, a[0]/i) <= k {
					ans = max(ans, a[0]*(a[0]/i))
				}
			}
			Fprintln(out, ans)
		}

		T := 1
		Fscan(in, &T)
		for Case := 1; Case <= T; Case++ {
			solve(Case)
		}

		_leftData, _ := io.ReadAll(in)
		if _s := strings.TrimSpace(string(_leftData)); _s != "" {
			panic("有未读入的数据：\n" + _s)
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1778F)
}

const N = 200

var n78, k int
var a []int
var adj [N][]int
var g, b, spf [N]int

func dfs1(v int, par int) {
	g[v] = a[v]
	for _, ch := range adj[v] {
		if ch == par {
			continue
		}
		dfs1(ch, v)
		gcd := func(a, b int) int {
			for a != 0 {
				a, b = b%a, a
			}
			return b
		}
		g[v] = gcd(g[v], g[ch])
	}
}

func dfs2(v int, par int, target int) int {
	if g[v]%target == 0 {
		return 0
	} else if a[v]%target != 0 {
		return n78 + 1
	}
	c := 0
	for _, ch := range adj[v] {
		if ch == par || g[ch]%target == 0 {
			continue
		}
		c += 1 + dfs2(ch, v, b[target])
	}
	return c
}
